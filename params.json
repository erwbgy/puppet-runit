{"body":"## puppet-runit\r\n\r\nPuppet module to create user services linked to init\r\n\r\n### User services\r\n\r\nSystem services managed by root get automatically started at boot and restarted\r\nif they fail. And, there is a consistent way to manage them: service\r\n`start|stop|restart|status <service name>`.  The idea of user services is to \r\nprovide the same for user processes.\r\n\r\nEach user has a service directory under their home directory that is managed by\r\ntheir own runsvdir process.  This runsvdir process is linked to init so will be\r\nstarted at boot and restarted if it fails.  Similarly any user services\r\nconfigured under $HOME/service will be started at boot and restarted if they\r\nfail, if configured to do so.  All services are managed in a consistent way:\r\n`sv start|stop|restart|status <service_name>`.\r\n\r\nEach runit service has a subdirectory under $HOME/service which is the same of\r\nthe service.  Inside this directory is a script called *run* that starts the\r\nprocess running in the _foreground_, with the final command starting with\r\n*exec*.\r\n\r\nOptionally a service can have a *finish* script that is executed when the\r\nservice stops running - for example because the process died or the user\r\nrequested so.  This can be useful to diagnose failures and configure the number\r\nof restarts in a time period.\r\n\r\nIf a _down_ file exists in the service directory then the service will not be\r\nautomatically restarted if it fails or a boot time.\r\n\r\nIf the process writes output to stdout or stderr this can be fed through a\r\nmanaged log process called svlogd which takes care of prefixing timestamps and\r\nrotating logs according to a policy - for example daily.\r\n\r\n## Runit package\r\n\r\nRunit is not normally packaged by distributions so you will need to clone the\r\ngit repository and build the RPM yourself - for example:\r\n\r\n    # yum install git rpm-build rpmdevtools gcc glibc-static make\r\n    # git clone https://github.com/imeyer/runit-rpm.git\r\n    # cd runit-rpm\r\n    # ./build.sh\r\n    # cp /root/rpmbuild/RPMS/x86_64/runit-2.1.1-6.el6.x86_64.rpm \\\r\n    /var/lib/puppet/files/\r\n\r\nThis module expects that the RPM has been placed in the directory specified by\r\nthe files section of the Puppet file server.  For example if fileserver.conf\r\nhas:\r\n\r\n     [files]\r\n     path /var/lib/puppet/files\r\n\r\nthen place the RPM in /var/lib/puppet/files.  \r\n\r\n## runit\r\n\r\nInstalls Runit and sets things up for user services so must be called \r\nbefore runit::user is.\r\n\r\nNormally this module is just included:\r\n\r\n    include runit\r\n\r\nwhich is the same as:\r\n\r\n    class { 'runit': package_file => 'runit-2.1.1-6.el6.x86_64.rpm' }\r\n\r\nTo use a different package file set the package_file parameter:\r\n\r\n    class { 'runit': package_file => 'runit-1.8.0-1.el6.x86_64.rpm' }\r\n\r\n## runit::user\r\n\r\nUsed to set up a service directory for a user - for example:\r\n\r\n    runit::user { 'kburdis': group => 'kburdis' }\r\n\r\nwill create /home/kburdis/service managed by a runsvdir process with any logs\r\nfrom this process written to /home/kburdis/logs/runsvdir/current.\r\n\r\nThe user (or other Puppet modules) can then create services under\r\n$HOME/service.\r\n\r\n","google":"","tagline":"Puppet module to manage Runit user services","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Puppet-runit"}
{"tagline":"Puppet module to manage Runit user services","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Puppet-runit","body":"# puppet-runit\r\n\r\nPuppet module to create user services linked to init\r\n\r\nCurrently only works on RedHat-like systems.\r\n\r\n## runit\r\n\r\nThis module installs Runit and sets up for user services.  Configured users can\r\nthen set up managed services under their home directory that work similarly to\r\nsystem services.\r\n\r\nThe recommended usage is to place the configuration under in a hiera config\r\nfile and just include the runit module in your puppet configuration:\r\n\r\n    include runit\r\n\r\nExample hiera config:\r\n\r\n    runit:package_file: runit-2.1.1-6.el6.x86_64.rpm\r\n    runit::users:\r\n      'kburdis':\r\n        group: 'admins'\r\n      'fbloggs':\r\n        group: 'users'\r\n      \r\nThis installs the runit package and configures runit.  It then calls\r\nrunit::user to configure user services for the kburdis and fbloggs users.\r\n\r\n### Parameters\r\n\r\n*basedir* the base directory under which service directories are created -\r\ndefault is '/home' making the service directory '/home/${user}/service'\r\n\r\n*filestore* the filestore where the runit package file is located on the Puppet\r\nmaster - default is 'puppet:///files/runit'\r\n\r\n*package_file*: the name of the RPM package file to install - see the Runit\r\nPackage section below. Required.\r\n\r\n*users*: a list of users to set up user services for - see the User Services\r\nsection below. Optional.\r\n\r\n*workspace* the workspace directory where files are stored on the Puppet agent\r\nhosts - default is '/root/runit'\r\n\r\n## runit::user\r\n\r\nUsed to set up a service directory for a user - for example:\r\n\r\n    runit::user { 'kburdis': group => 'users' }\r\n\r\nwill create /home/kburdis/service managed by a runsvdir process with any logs\r\nfrom this process written to /home/kburdis/logs/runsvdir/current.  The user (or\r\nother Puppet modules) can then create services under $HOME/service.\r\n\r\n### Parameters\r\n\r\n*title*: The title is the user's username - for example 'kburdis' in the example above.\r\n\r\n*basedir* the base directory under which service directories are created -\r\ndefault is '/home' making the service directory '/home/${user}/service'\r\n\r\n*group*: The group the runit files under the user's home directory will be\r\nowned by.  Defaults to the same as the username.\r\n\r\n## runit::service\r\n\r\nExample:\r\n\r\n    class runit::service { 'tomcat': \r\n      user  => 'kburdis,\r\n      group => 'users,\r\n    }\r\n\r\nCreate a service directory under $HOME/runit with:\r\n\r\n* Stdout logged to subdirectory under $HOME/logs using svlogd\r\n\r\n* A configurable number of restarts within a certain restart interval\r\n\r\nThe user just needs to supply a run script that:\r\n\r\n* Redirects stderr to stdout\r\n\r\n* Runs the final command in the forefound prefixed with 'exec'\r\n\r\nand link the service directory under $HOME/service - for example:\r\n\r\n  $ ln -s $HOME/runit/tomcat $HOME/service/tomcat\r\n\r\n### Parameters\r\n\r\n*title*: The title is the service name (eg. tomcat in the example above)\r\n\r\n*user*: The user running the service (used for file location and ownership)\r\n\r\n*group*: The group of the user running the service (used for file ownership)\r\n\r\n*restart_interval*: The minimum delay (in seconds) between automatic restarts.\r\nDefault: 30\r\n\r\n*restart_count*: The maximum number of automatic restarts allowed. Default: 3\r\n\r\n*clear_interval*: Reset the restart count if this number of seconds have\r\nelapsed since the last automatic restart.  Default: 300\r\n\r\n*log_size*: The size of the log file (in bytes) before it is rotated. Default:\r\n1000000000\r\n\r\n*log_max_files*: The maximum number of old log files to keep. Default: 30\r\n\r\n*log_min_files*: The minimum number of files to keep (regardless of lack of\r\ndisk space). Default: 2\r\n\r\n*log_rotate_time*: The age of the log file (in seconds) before it is rotated.\r\nDefault: 86400 (1 day)\r\n\r\n*home* the base directory under which service directories are created -\r\ndefault is '/home' making the service directory '/home/${user}/service'\r\n\r\n*down*: True if the service should not be started automatically as soon as the\r\nservice directory is created. Default: false\r\n\r\n## User services\r\n\r\nSystem services managed by root get automatically started at boot and restarted\r\nif they fail. And, there is a consistent way to manage them: service\r\n`start|stop|restart|status <service name>`.  The idea of user services is to\r\nprovide the same for non-root user processes.\r\n\r\nEach user has a service directory under their home directory that is managed by\r\ntheir own runsvdir process.  This runsvdir process is linked to init so will be\r\nstarted at boot and restarted if it fails.  Similarly any user services\r\nconfigured under $HOME/service will be started at boot and restarted if they\r\nfail, if configured to do so.  All services are managed in a consistent way:\r\n`sv start|stop|restart|status <service_name>`.\r\n\r\nEach runit service has a subdirectory under $HOME/service which is the same of\r\nthe service.  Inside this directory is a script called *run* that starts the\r\nprocess running in the _foreground_, with the final command starting with\r\n*exec*.\r\n\r\nOptionally a service can have a *finish* script that is executed when the\r\nservice stops running - for example because the process died or the user\r\nrequested so.  This can be useful to diagnose failures and configure the number\r\nof restarts in a time period.\r\n\r\nIf a _down_ file exists in the service directory then the service will not be\r\nautomatically restarted if it fails or a boot time.\r\n\r\nIf the process writes output to stdout or stderr this can be fed through a\r\nmanaged log process called svlogd which takes care of prefixing timestamps and\r\nrotating logs according to a policy - for example daily.\r\n\r\n## Runit Package\r\n\r\nRunit is not normally packaged by distributions so you will likely need to\r\nclone Ian Meyer's git repository and build the RPM yourself - for example:\r\n\r\n    # yum install git rpm-build rpmdevtools gcc glibc-static make\r\n    # git clone https://github.com/imeyer/runit-rpm.git\r\n    # cd runit-rpm\r\n    # ./build.sh\r\n    # cp /root/rpmbuild/RPMS/x86_64/runit-2.1.1-6.el6.x86_64.rpm \\\r\n    /var/lib/puppet/files/\r\n\r\nBy default this module expects that the RPM has been placed in the directory\r\nspecified by the _files_ section of the Puppet file server.  For example if\r\nfileserver.conf has:\r\n\r\n     [files]\r\n     path /var/lib/puppet/files\r\n\r\nthen place the RPM in /var/lib/puppet/files/runit.  This location can be\r\nchanged using the fileserver property.\r\n\r\n## Support\r\n\r\nLicense: Apache License, Version 2.0\r\n\r\nGitHub URL: https://github.com/erwbgy/puppet-runit\r\n","google":""}